#!/usr/bin/env node

const { execSync } = require('child_process');
const program = require('commander');
const fs = require('fs');
const { resolve } = require('path');

program
  .command('init')
  .option('-r, --recursive', 'Remove recursively')
  .action((cmd) => {
    const source = resolve(__dirname, '..');
    const destination = process.cwd();

    if (source === destination) {
      console.log('Cannot install into itself.');
      return;
    }

    console.log(`Init ${source} -> ${destination}`);

    function copy(file) {
      const toFile = file.endsWith('_publish') ? file.slice(0, -8) : file;
      console.log(`Copying ${toFile}...`)
      fs.copyFileSync(resolve(source, file), resolve(destination, toFile));
    }

    copy('.editorconfig');
    copy('.gitignore_publish');
    copy('.npmignore_publish');
    copy('tsconfig.json');
    copy('tslint.json');

    try {
      fs.mkdirSync(resolve(destination, 'src'));
    } catch{ }
    try {
      fs.mkdirSync(resolve(destination, 'test'));
    } catch{ }

    const package = JSON.parse(
      fs.readFileSync(resolve(destination, 'package.json')).toString(),
    );
    Object.assign(package, {
      main: './dist/index.js',
      types: './dist/index.d.ts',
    });
    package.scripts = Object.assign(package.scripts || {}, {
      test: 'npx jest --coverage',
      build: 'rm -rf dist && npx tsc --outDir dist --declaration --sourceMap',
      prepublishOnly: 'npm run build && npm version patch',
    });

    fs.writeFileSync(
      resolve(destination, 'package.json'),
      JSON.stringify(package, null, 2),
      'utf-8',
    );

    execSync('npm i -D @types/jest @types/node jest tslint typescript');

    console.log('. Done');
  });

program.parse(process.argv);
